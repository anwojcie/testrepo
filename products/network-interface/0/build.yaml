name: $(Build.RequestedFor) $(Build.SourceBranchName) $(productName) $(productVersion)

trigger:
  batch: true
  paths:
    include: # the include needs to be set to the subfolder of this product. e.g. products/keyvault/0/*
    - products/network-interface/0/*
    exclude: # define excluded files for the trigger as needed
    - '*/readme.md'
    - '*.png'

variables:
- template: build.variables.yaml
- template: /general/pipelines/build.AzSubscription.variables.yaml
- template: /general/pipelines/publish.UniversalFeed.variables.yaml

stages:
- stage: Validation
  jobs:
    - job:
      displayName: armttk tests ${{ variables.productName }}
      steps:
      - task: PowerShell@2
        displayName: 'Run deploymentTemplate tests from ARM Template Tester Toolkit'
        inputs:
          targetType: 'inline'
          script: |
            Install-Module pester -MinimumVersion 5.0 -Force               
            Import-Module -Name Pester -MinimumVersion 5.0               
            Invoke-Pester -Path ./test/powershell/arm-ttk.tests.ps1 -OutputFile "$(Common.TestResultsDirectory)\TEST-armttk-${{ variables.productName }}.xml" -OutputFormat NUnitXml -passthru â€“EnableExit
          pwsh: true
          workingDirectory: '${{ variables.productPath }}'
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'NUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
          searchFolder: '$(Common.TestResultsDirectory)' # Optional
          failTaskOnFailedTests: true
        condition: always()

    - job:
      displayName: Validate Deployment ${{ variables.productName }} V ${{ variables.productVersion }}
      steps:
        - task: AzureResourceManagerTemplateDeployment@3
          inputs:
            deploymentScope: 'Resource Group'
            azureResourceManagerConnection: ${{variables.azureResourceManagerConnection}}
            subscriptionId: ${{variables.subscriptionId}}
            action: 'Create Or Update Resource Group'
            resourceGroupName: ${{variables.resourceGroupName}}
            location: 'West Europe'
            templateLocation: 'Linked artifact'
            csmFile: ${{ variables.productPath }}/armtemplates/azuredeploy.json
            csmParametersFile: ${{ variables.productPath }}/demos/azuredeploy.parameters.json
            #overrideParameters: '-parametername value''
            deploymentMode: 'Validation'

- stage: 
  displayName: Deploy and Test
  jobs: 
    - job: DeployTest
      displayName: Deploy and Test ${{ variables.productName }} V ${{ variables.productVersion }}
      steps:
        - task: AzureResourceManagerTemplateDeployment@3
          displayName: Deploy Virtual Network
          inputs:
            deploymentScope: 'Resource Group'
            azureResourceManagerConnection: ${{variables.azureResourceManagerConnection}}
            subscriptionId: ${{variables.subscriptionId}}
            action: 'Create Or Update Resource Group'
            resourceGroupName: ${{variables.resourceGroupName}}
            location: 'West Europe'
            templateLocation: 'Linked artifact'
            csmFile: products/virtual-network/0/armtemplates/azuredeploy.json
            csmParametersFile: products/virtual-network/0/demos/azuredeploy.parameters.json
            overrideParameters: '-name vnet-test'
            deploymentOutputs: 'AZOUTVNET'
            deploymentMode: Incremental
        - task: PowerShell@2
          displayName: 'set_env'
          inputs:
            targetType: inline
            script: |
              foreach ($deploutputjson in $(get-item env:AZOUT* )) {
                $deploymentoutput = $deploutputjson.Value | ConvertFrom-Json
                foreach ($member in $deploymentoutput.psobject.Properties) {
                  if ($member.value.type -in ('String', 'Int', 'Bool')) {
                    "Will set $($deploutputjson.name + '_' + $member.name)`tto`t$($member.Value.value)"
                    "##vso[task.setvariable variable=$($deploutputjson.name + '_' + $member.name)]$($member.Value.value)"
                  }
                }
              }
              get-item env:AZOUT*
            pwsh: true
        - task: PowerShell@2
          displayName: 'get_env'
          inputs:
            targetType: inline
            script: |
              get-item env:AZOUT*
            pwsh: true
        - task: AzureResourceManagerTemplateDeployment@3
          displayName: Deploy ${{ variables.productName }}
          inputs:
            deploymentScope: 'Resource Group'
            azureResourceManagerConnection: ${{variables.azureResourceManagerConnection}}
            subscriptionId: ${{variables.subscriptionId}}
            action: 'Create Or Update Resource Group'
            resourceGroupName: ${{variables.resourceGroupName}}
            location: 'West Europe'
            templateLocation: 'Linked artifact'
            csmFile: ${{ variables.productPath }}/armtemplates/azuredeploy.json
            csmParametersFile: ${{ variables.productPath }}/demos/azuredeploy.parameters.json
            overrideParameters: '-subnetId $(AZOUTVNET_SUBNETID)'
            deploymentOutputs: 'deploymentoutput'
            deploymentMode: Incremental
        - task: AzurePowerShell@5
          displayName: Test ${{ variables.productName }} 
          inputs:
            azureSubscription: ${{variables.azureResourceManagerConnection}}
            #ScriptType: FilePath
            #ScriptPath: ${{ variables.productPath }}/test/powershell/somescript.ps1  
            ScriptType: InlineScript
            Inline: |
              Write-host "Your testscript goes in here..."
              #Get deploymentOutputs
              if ($env:DEPLOYMENTOUTPUT){
                $deploymentOutputs = $env:DEPLOYMENTOUTPUT | convertfrom-json
                $deploymentOutputs | select * | fl
              }
            azurePowerShellVersion: 'LatestVersion'
    - job:
      displayName: Destroy ${{ variables.productName }}
      dependsOn: DeployTest
      steps:
        - task: AzureResourceManagerTemplateDeployment@3
          displayName: Destroy ${{ variables.productName }}
          inputs:
            deploymentScope: 'Resource Group'
            azureResourceManagerConnection: ${{variables.azureResourceManagerConnection}}
            subscriptionId: ${{variables.subscriptionId}}
            action: DeleteRG
            resourceGroupName: ${{variables.resourceGroupName}}
            
- stage: Publish
  jobs: 
    - job: PublishPiplineArtifact
      steps:
        - task: PublishPipelineArtifact@1 # This one is mainly so Devs can see what is going to be published later on
          displayName: Publish PipelineArtifact ${{ variables.productName }}
          inputs:
            targetPath: ${{ variables.productPath }}/
            artifactName: ${{ lower(variables.productName) }} #artifactname = Package in the artifact feed -> has to be lowercase, only lowercase here to look the same as in the artifact feed
        - task: UniversalPackages@0
          displayName: Publish Artifact ${{ variables.productName }} to feed ${{variables.vstsFeed}}
          condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.Reason'], 'PullRequest')) #will only publish on commits to master, meaning this is a realease
          inputs:
            command: publish
            publishDirectory: ${{ variables.productPath }}/
            feedsToUsePublish: 'internal'
            vstsFeedPublish: ${{variables.vstsFeed}}
            vstsFeedPackagePublish: ${{ lower(variables.productName) }}
            packagePublishDescription: $(Build.SourceVersionMessage)
            versionOption: 'minor'
            versionPublish: ${{ variables.productVersion }} 


